import { z } from "zod";

//#region remap.d.ts
type TuplesFromObject<T> = { [P in keyof T]: [P, T[P]] }[keyof T];
type GetKeyByValue<T, V> = TuplesFromObject<T> extends infer TT ? TT extends [infer P, V] ? P : never : never;
/**
 * @fileoverview Mapping utils for Zod Runtime Plugin (remap)
 * @link https://stackoverflow.com/questions/55454125/typescript-remapping-object-properties-in-typesafe
 * @todo try to reuse R.Remap from Ramda (requires to move its types to prod dependencies)
 */
type Remap<T, U extends { [P in keyof T]?: V }, V extends string> = { [P in NonNullable<U[keyof U]>]: T[GetKeyByValue<U, P>] };
type Intact<T, U> = { [K in Exclude<keyof T, keyof U>]: T[K] };
//#endregion
//#region augmentation.d.ts
declare module "zod/v4/core" {
  interface GlobalMeta {
    default?: unknown;
    examples?: unknown[];
  }
}
/**
 * @fileoverview Zod Runtime Plugin
 * @see https://github.com/colinhacks/zod/blob/90efe7fa6135119224412c7081bd12ef0bccef26/plugin/effect/src/index.ts#L21-L31
 * @desc This code modifies and extends zod's functionality immediately when importing the plugin.
 * @desc Enables .example() and .deprecated() on all schemas (ZodType)
 * @desc Enables .label() on ZodDefault
 * @desc Enables .remap() on ZodObject
 * @desc Stores the argument supplied to .brand() on all schemas (runtime distinguishable branded types)
 * */
declare module "zod" {
  interface ZodType<out Output = unknown, out Input = unknown, out Internals extends z.core.$ZodTypeInternals<Output, Input> = z.core.$ZodTypeInternals<Output, Input>> extends z.core.$ZodType<Output, Input, Internals> {
    /** @desc Shorthand for .meta({ examples }) */
    example(example: z.output<this>): this;
    deprecated(): this;
  }
  interface ZodDefault<T extends z.core.SomeType = z.core.$ZodType> extends z._ZodType<z.core.$ZodDefaultInternals<T>>, z.core.$ZodDefault<T> {
    /** @desc Shorthand for .meta({ default }) */
    label(label: string): this;
  }
  interface ZodObject<out Shape extends z.core.$ZodShape = z.core.$ZodLooseShape, out Config extends z.core.$ZodObjectConfig = z.core.$strip> extends z._ZodType<z.core.$ZodObjectInternals<Shape, Config>>, z.core.$ZodObject<Shape, Config> {
    remap<V extends string, U extends { [P in keyof Shape]?: V }>(mapping: U): z.ZodPipe<z.ZodPipe<this, z.ZodTransform>,
    // internal type simplified
    z.ZodObject<Remap<Shape, U, V> & Intact<Shape, U>, Config>>;
    remap<U extends z.core.$ZodShape>(mapper: (subject: Shape) => U): z.ZodPipe<z.ZodPipe<this, z.ZodTransform>, z.ZodObject<U>>;
  }
}
//#endregion
export {};